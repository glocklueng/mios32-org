$Id$

Current Evaluation Boards
~~~~~~~~~~~~~~~~~~~~~~~~~

   o STM32 Primer
     -> http://www.st.com/mcu/contentid-105-110-STM3210B_PRIMER.html
     ca. 40 EUR
     TM32F103B in 64-pin LQFP package with 128 Kbytes flash program 
     memory and 20 Kbytes SRAM and embedded communication peripherals 
     for USB, CAN, USART, SPI, I2C and LIN

   o STR9 comStick
     *** !!! CURRENTLY NOT SUPPORTED BY MIOS32 !!! ***
     -> http://www.hitex.com/str9-comstick/con-str9-comstick.html
     ca. 50 EUR
     STR912 microcontroller
       - ARM966E RISC core up to 96 MHz
       - 512 + 32 k FLASH and 96 k RAM
       - 10/100 Ethernet MAC
       - USB full speed device, CAN and UART


   o upcoming MBHP_CORE_STM32 module
     ca. 25 EUR


Downloading Repository
~~~~~~~~~~~~~~~~~~~~~~

Download the repository with:
   svn co svn://svnmios.midibox.org/mios32

If you have write access to the midibox.org SVN server, use:
   svn co svn+ssh://svn@midibox.org/mios32


Synching Repository
~~~~~~~~~~~~~~~~~~~

Just type "svn update" in the root directory of the repository


Environment Variables
~~~~~~~~~~~~~~~~~~~~~

Before compiling code, set the MIOS32 environment variables:

Unix (we assume, that the repository has been dowloaded into ~/svn)
  export MIOS32_PATH=~/svn/mios32/trunk
  export MIOS32_BIN_PATH=$MIOS32_PATH/bin


DOS: (we assume, that the repository has been downloaded to D:\)
  set MIOS32_PATH=D:\mios32\trunk
  set MIOS32_BIN_PATH=D:\mios32\trunk\bin


Additional environment variables to configure the environment:
(they have to be set, otherwise compiler will fail)

MBHP_CORE_STM32:
export MIOS32_GCC_PREFIX=arm-none-eabi
export MIOS32_FAMILY=STM32F10x
export MIOS32_PROCESSOR=STM32F103RE
export MIOS32_BOARD=MBHP_CORE_STM32
export MIOS32_LCD=clcd


STM32 Primer:
export MIOS32_GCC_PREFIX=arm-none-eabi
export MIOS32_FAMILY=STM32F10x
export MIOS32_PROCESSOR=STM32F103RB
export MIOS32_BOARD=STM32_PRIMER
export MIOS32_LCD=st7637



Installing Toolchain
~~~~~~~~~~~~~~~~~~~~

Windows
=======

STM32 Primer: install the toolchain which comes with the CD (Ride7)

MBHP_CORE_STM32: dito (TODO: check if free available for download)
For uploading code, OpenOCD is required, a "known good" version
can be downloaded from: http://www.yagarto.de/howto/openocd/index.html#install

Newer versions than r717 might fail (or not) for STM32 - they are continuosly
working on it.

STR9 comStick: install WinARM
-> http://www.siwawi.arubi.uni-kl.de/avr_projects/arm_projects/#winarm


MacOS
=====

STM32 Primer
------------

Excellent guide can be found under
-> http://www.paintyourdragon.com/uc/osxstm32/index.html
Note, that the installation of FatFryer is not required, as CircleOS
is not used. 
For the MIOS32 platform, a Bootloader for MacOS/Linux is not available
yet, therefore the upload of a .hex file has do be done from a Windows
PC with the cortex_pgm tool, which comes with the Ride7 IDE
Command:
   cortex_pgm.exe TSTM32F103RBT6 E B PRTOSDemo.hex S


MBHP_CORE_STM32
---------------

Excellent guide to install gcc for Cortex M3 can be found under
-> http://www.paintyourdragon.com/uc/osxstm32/index.html
Note, that the installation of FatFryer is not required, as CircleOS
is not used. 

Download of .bin file: install OpenOCD
Download a known good version from repository:
  svn -r 717 co svn://svn.berlios.de/openocd/trunk openocd
and build it

Newer versions than r717 might fail (or not) for STM32 - they are continuosly
working on it.

OpenOCD usage: see "Quickstart" below, translate DOS commands to
Unix commands


STR9 comStick
-------------

*** !!! CURRENTLY NOT SUPPORTED BY MIOS32 !!! ***

Precompiled binaries for arm-elf-gcc, which are based on WinARM, are
available here:
-> http://www.mikrocontroller.net/articles/ARM_GCC_toolchain_for_Linux_and_Mac_OS_X

Expert knowledge is required to recompile newer gcc sources due to various
issues with MacOS gcc installation, see also:
-> http://gmplib.org/macos.html

.bin file (memory image format like .hex) can be downloaded with openOCD:
http://openocd.berlios.de/web/
(scripts located under $MIOS32_PATH/etc/openocd)


Linux
=====

STM32 Primer
------------

gcc sources can be downloaded from:
-> http://www.paintyourdragon.com/uc/osxstm32/index.html
and simply recompiled for your Linux installation

Download of .hex files: same issue as for MacOS

NOTE for Ubuntu users: you may have to install:
-buil-essential
-texinfo
-flex
-bison
If the compiler complains because can' t find "stdio_ext.h" try:
    sudo chmod 644 /usr/include/stdio_ext.h
and
    CFLAGS="$CFLAGS -I/usr/include"
to be sure that the C compiler is looking for headers in the right place.


MBHP_CORE_STM32
---------------

gcc sources can be downloaded from:
-> http://www.paintyourdragon.com/uc/osxstm32/index.html
and simply recompiled for your Linux installation

Download of .bin file: install OpenOCD
Download a known good version from repository:
  svn -r 717 co svn://svn.berlios.de/openocd/trunk openocd
and build it

Newer versions than r717 might fail (or not) for STM32 - they are continuosly
working on it.

OpenOCD usage: see "Quickstart" below, translate DOS commands to
Unix commands


STR9 comStick
-------------

*** !!! CURRENTLY NOT SUPPORTED BY MIOS32 !!! ***

Precompiled binaries for arm-elf-gcc, which are based on WinARM, are
available here:
-> http://www.mikrocontroller.net/articles/ARM_GCC_toolchain_for_Linux_and_Mac_OS_X

But is should also be possible to install a newer version.
Guide:
-> http://elua.berlios.de/tut_gcc_arm.html

.bin file (memory image format like .hex) can be downloaded with openOCD:
http://openocd.berlios.de/web/
(scripts located under $MIOS32_PATH/etc/openocd)



Quickstart STM32 Primer under DOS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We assume, that the MIOS32 repository has been downloaded to D:\mios32, and that
the Ride7 IDE (which comes with STM32 Primer) has been installed. We won't use
the IDE, but build & upload the application from the commandline instead.

So, all we need from Ride7 IDE is the gcc compiler:
   C:\Programs\Raisonance\Ride\arm-gcc
and the propritary code upload tool "cortex_pgm.exe" under:
   C:\Programs\Raisonance\Ride\bin

PATH variables should already be set correctly after Ride installation.

In addition, we need the same MinGW installation (with modified make.exe)
like used for the PIC based MIOS environment, see also:
   http://www.midibox.org/dokuwiki/windows_toolchain_core


a) set your environment variables to:
     set MIOS32_PATH=D:\mios32\trunk
     set MIOS32_BIN_PATH=D:\mios32\trunk\bin
     set MIOS32_FAMILY=STM32F10x
     set MIOS32_PROCESSOR=STM32F103RB
     set MIOS32_BOARD=STM32_PRIMER
     set MIOS32_LCD=st7637

   (note you could write this into a batch file)


b) go into an application directory, e.g.
     cd %MIOS32_PATH%\apps\examples\app_lcd\st7637


c) build the project with

     gmake -s

   (-s will lead to a less verbose output)


d) ensure that the STM32 Primer is connected to your PC
   (USB cable at the left side is for debugging interface)

e) upload the project with:

     cortex_pgm TSTM32F103RBT6 E B Pproject.hex S

   (cortex_pgm.exe is part of the Ride7 installation)
   (you could create a batch file for this command as well)


f) after upload the program will be executed automatically
   Red/Green LED should flicker very fast (probably will only see a solid light)
   The LCD should show a display animation



Quickstart MBHP_CORE_STM32 under DOS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We assume, that the MIOS32 repository has been downloaded to D:\mios32, and that
an arm-gcc installation is available, which supports Cortex M3 
(TODO: check if free available from Raisonance website)

The command:
   arm-none-eabi-gcc --version
should return a version number >= 4.2.1

Sidenote: If you use a different arm-gcc installation (later, once properly 
integrated into gcc), you have to adapt your MIOS32_GCC_PREFIX setting, e.g.
from "arm-none-eabi" to the common "arm-elf"


In addition we need OpenOCD to upload code.
Download: http://www.yagarto.de/howto/openocd/index.html#install

Newer versions than r717 might fail (or not) for STM32 - they are continuosly
working on it.


Last but not least you need a JTAG programmer for ARM processors (search on
Ebay, or see http://shop.embedded-projects.net/product_info.php?info=p75_OpenOCD-USB-Adapter.html


a) set your environment variables to:
     set MIOS32_PATH=D:\mios32\trunk
     set MIOS32_BIN_PATH=D:\mios32\trunk\bin
     set MIOS32_FAMILY=STM32F10x
     set MIOS32_PROCESSOR=STM32F103RE
     set MIOS32_BOARD=MBHP_CORE_STM32
     set MIOS32_LCD=clcd

   (note you could write this into a batch file)


b) go into an application directory, e.g.
     cd %MIOS32_PATH%\apps\proto\mios32_srio


c) build the project with

     gmake -s

   (-s will lead to a less verbose output)


d) ensure that the JTAG interface is connected to your PC and MBHP_CORE_STM32 module


e) open a new DOS shell, **go into the directory where you built the code**,
   and start the OpenOCD server with:
      openocd-ftd2xx -f %MIOS32_PATH%\etc\openocd\interface\in-circuit-openocd-dos.cfg -f %MIOS32_PATH%\etc\openocd\target\STM32F10x.cfg 
   You can left this DOS window open while rebuilding your application - it can run
   permanently to talk with your STM32

   If you are using a different JTAG interface, create a new .cfg file for it and
   adapt the USB search string (thereafter commit your new file to the repository,
   so that others can use it as well!)

f) open a third DOS shell, and type "telnet localhost 4444"
   This will connect you with the server
   "help" gives you a list of available commands

   My favourites:
      script <filename>      # to execute a batch file
      reset run              # to reset the chip
      halt                   # to stop CPU execution
      resume                 # to continue CPU execution
      reg                    # to get CPU registers, e.g. the program counter (only works in halt mode)
      mdw                    # to display memory regions, e.g. flash, SRAM and peripheral registers

g) inside the telnet session, type 
      script D:\mios32\trunk\etc\openocd\scripts\STM32F10x_upload.script
   to download and execute the project.bin file of the directory location from
   where you started the OpenOCD server (and not the telnet session!)

h) note that "telnet" also allows to connect you to a remote computer.
   Means: you are able to debug a MBHP_CORE_STM32 module via intra- or internet!


i) not tested yet (as not useful for myself) but possible:
   OpenOCD has a gdb interface which allows you to debug code from a IDE like
   Eclipse (all operating systems) or XCode (MacOS)



COM Console
~~~~~~~~~~~

Windows
-------

Either USB MIDI, or USB COM can be used, but not both the same time due
to driver limitations.
If COM is activated, and Windows ask you for a driver, use the 
   $MIOS32_PATH/etc/inf/mios32_com.inf
file.

An .inf file is not required for USB MIDI.


MacOS
-----

USB MIDI and COM can be used in parallel.
COM terminal: most simple connection via "screen" command, you can execute it from
the Terminal.app

Usage: search for the "modem" device:
   ls /dev/tty.*

You will get something like:
/dev/tty.Bluetooth-Modem		/dev/tty.Nokia6230i-NokiaPCSuite-1
/dev/tty.Bluetooth-PDA-Sync		/dev/tty.usbmodem1a243
/dev/tty.Nokia6230i-Dial-upnetwo-2

/dev/tty.usbmodem1a243 is the right one.

Now execute the serial terminal with:
   screen /dev/tty.usbmodem1a243


Alternatively (if you prefer GUIs), you could use ZTerm:
   http://homepage.mac.com/dalverson/zterm/


Linux
-----

USB MIDI and COM can be used in parallel.
COM terminal: most simple connection via "screen" command, you can execute it from
a common terminal

Usage: search for the ACM device:
   ls /dev/ttyACM*

If no other USB ACM device (like a modem) is connected, the MIOS32 core
usually allocates ACM0

Now execute the serial terminal with:
   screen /dev/ttyACM0


Installing Insight Debugger
~~~~~~~~~~~~~~~~~~~~~~~~~~~

(Optional - Codeblocks seems to run more stable! See next section :)


Download Insight from
   http://sources.redhat.com/insight/
e.g.:
   ftp://sourceware.org/pub/insight/releases
version 6.8

go into installation dir
   mkdir build; cd build
   ../configure --target=$MIOS32_GCC_PREFIX --prefix=/usr/local/stm32 --disable-nls --enable-shared
   make
   sudo make install

Starting:
   $MIOS32_GCC_PREFIX-insight project.elf &
(assumed that /usr/local/stm32/bin is in your PATH variable)

MacOS: if you get following message
---
$MIOS32_GCC_PREFIX-insight project.elf 
dyld: Library not loaded: libitcl3.2.dylib
  Referenced from: /usr/local/stm32/bin/arm-none-eabi-insight
  Reason: image not found
Trace/BPT trap
---
use:
  export DYLD_LIBRARY_PATH=/usr/local/stm32/lib
to set the location of the dylibs


Target selection for insight (done in the GUI)
   GDBserver/TCP
   localhost
   3333



Installing Code::Blocks IDE/Debugger
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Download from http://www.codeblocks.org


Configuration steps:

1) create a new toolchain for GCC ARM:

- go to Settings->Compiler and debugger...
- Select "Global compiler settings"
- Select GNU GCC Compiler (if not already selected)
- press Copy button, new name: Cortex M3 GCC
- press "Toolchain executables" tab
- change compiler's directory, e.g. to /usr/local/stm32
- add "arm-none-eabi" prefix to all commands, e.g.
  arm-none-eabi-gcc
  arm-none-eabi-g++
  ..
  arm-none-eabi-gdb
- Make program: write "make -s" for less verbose output

- select "Debugger settings", and add following "Debugger initialisation commands":

---
file project.elf
target remote localhost:3333
monitor reset halt
monitor wait_halt
monitor flash probe 0
monitor stm32x mass_erase 0
monitor flash write_image project.bin 0x08000000 bin
monitor halt
thbreak main
continue
---

2) define MIOS32 specific environment variables
- go to Settings->General Settings
- Select "Environment variables" tab, and add following variables:

(have to be adapted based on your pathes and requirements!)
(note that ~ doesn't work as shortcut for your home directory!)

---
MIOS32_PATH=/Users/TK/svn/mios32/trunk
MIOS32_BIN_PATH=$MIOS32_PATH/bin
MIOS32_GCC_PREFIX=arm-none-eabi
MIOS32_FAMILY=STM32F10x
MIOS32_PROCESSOR=STM32F103RE
MIOS32_BOARD=MBHP_CORE_STM32
MIOS32_LCD=clcd
---

MacOS users: add also
---
DYLD_LIBRARY_PATH=/usr/local/stm32/lib
---


3) Open a new, empty project
- copy an existing application into your project directory (or create the program inside the SVN tree)
- add at least "app.c" and "Makefile" to the project
- *NOW THE IMPORTANT STEP*
--> Right-click on your project, select "Properties..."
--> select "This is a custom Makefile" button


4) Building a project
press F9


5) Starting (and debugging) a project:
press F8
- this will download the application
- this will set a breakpoint at the main() function
- this will start the CPU
- CPU will stop at main() - continue from here

Note: don't use the Run button - there is nothing to be started on your PC






